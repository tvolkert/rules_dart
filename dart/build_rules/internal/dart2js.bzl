load(":common.bzl", "collect_dart_context", "make_package_uri")

def dart2js_action(ctx, dart_ctx, script_file,
                   checked, csp, deploy_dir, dump_info, emit_tar, extra_inputs,
                   fast_startup, library_root, minify, preserve_uris,
                   trust_primitives, trust_type_annotations, output_js,
                   other_outputs):
  """dart2js compile action.

  Args:
  - ctx: The Bazel BUILD context
  - dart_ctx: A context built for Dart-specific BUILD attributes
  - deploy_dir: Directory which should be used for creating a jar. This may
      contain any files that you want to be included in the jar, but those
      must be included in extra_inputs as well.
  - emit_tar: Whether to emit a corresponding .tar file including the assets
  - extra_inputs: Additional inputs to be provided to the dart2js action. These
      are generally files to be included in the output jar file, which is part
      of the dart2js action.
  - script_file: What file to invoke dart2js on (e.g. "web/main.dart")

  The following flags to dart2js are also supported:
  - checked
  - csp
  - dump_info
  - fast_startup
  - library_root
  - minify
  - preserve_uris
  - trust_primitives
  - trust_type_annotations
  """

  # Generate a fake .packages file that uses file:///bazel-root/ as the target
  # location of all packages
  transitive_ctxts = collect_dart_context(dart_ctx, transitive=True)
  package_spec_lines = []
  for dc in transitive_ctxts.values():
    if dc.package:
      package_spec_lines.append("%s:/bazel-root/%s" % (dc.package, dc.lib_root))
  package_spec = ctx.outputs.packages_file
  ctx.file_action(
      output=package_spec,
      content="# Generated by dart2js-action\n%s\n" % (
          "\n".join(package_spec_lines)),
  )

  out_script_path = make_package_uri(
      dart_ctx, script_file.path, prefix="bazel-root/")

  # Compute action inputs.
  inputs = depset()
  if extra_inputs:
    inputs += extra_inputs
  inputs += ctx.files._dart2js_support
  inputs += dart_ctx.transitive_dart_srcs.files
  inputs += [
      package_spec,
      ctx.executable._dart2js,
  ]

  # Compute dart2js args.
  dart2js_args = [
      "--packages=%s" % package_spec.path,
      "--out=%s" % output_js.path,
      "--bazel-paths=.,external/,%s/,%s/," % (
         ctx.configuration.bin_dir.path, ctx.configuration.genfiles_dir.path),
  ]
  if library_root:
    dart2js_args += ["--library-root=%s" % library_root]

  if checked:
    dart2js_args += ["--checked"]
  if csp:
    dart2js_args += ["--csp"]
  if dump_info:
    dart2js_args += ["--dump-info"]
  if fast_startup:
    dart2js_args += ["--fast-startup"]
  if minify:
    dart2js_args += ["--minify"]
  if preserve_uris:
    dart2js_args += ["--preserve-uris"]
  if trust_primitives:
    dart2js_args += ["--trust-primitives"]
  if trust_type_annotations:
    dart2js_args += ["--trust-type-annotations"]
  dart2js_args += [out_script_path]

  outputs = [output_js] + other_outputs
  arguments = []
  if emit_tar:
    arguments += [
        "--emit-tar",
        ctx.outputs.tar.path,
        ctx.configuration.bin_dir.path,
        output_js.short_path,
        "%s/%s" % (ctx.label.package, deploy_dir),
    ]
    outputs += [ctx.outputs.tar]
  arguments += [ctx.executable._dart2js.path] + dart2js_args

  ctx.action(
      inputs=list(inputs),
      executable=ctx.executable._dart2js_helper,
      arguments=arguments,
      outputs=outputs,
      progress_message="Compiling with dart2js %s" % ctx,
      mnemonic="Dart2jsCompile",
  )
